require 'spec_helper'

describe Yacht::Loader do
  subject{ Yacht::Loader }

  let(:mock_js_comment) {
    ";\n" +
    '// _______________________________________          ' + "\n" +
    '// / DO NOT EDIT THIS FILE DIRECTLY. Yacht \        ' + "\n" +
    '// \ generated this file from js_keys.yml  /        ' + "\n" +
    '// ---------------------------------------          ' + "\n" +
    '//         \                                        ' + "\n" +
    '//          \                                       ' + "\n" +
    '//           \          __---__                     ' + "\n" +
    '//                   _-       /--______             ' + "\n" +
    '//              __--( /     \ )XXXXXXXXXXX\v.       ' + "\n" +
    '//            .-XXX(   O   O  )XXXXXXXXXXXXXXX-     ' + "\n" +
    '//           /XXX(       U     )        XXXXXXX\    ' + "\n" +
    '//         /XXXXX(              )--_  XXXXXXXXXXX\  ' + "\n" +
    '//        /XXXXX/ (      O     )   XXXXXX   \XXXXX\ ' + "\n" +
    '//        XXXXX/   /            XXXXXX   \__ \XXXXX ' + "\n" +
    '//        XXXXXX__/          XXXXXX         \__---->' + "\n" +
    '// ---___  XXX__/          XXXXXX      \__         /' + "\n" +
    '//  \-  --__/   ___/\  XXXXXX            /  ___--/= ' + "\n" +
    '//   \-\    ___/    XXXXXX              "--- XXXXXX ' + "\n" +
    '//      \-\/XXX\ XXXXXX                      /XXXXX ' + "\n" +
    '//        \XXXXXXXXX   \                    /XXXXX/ ' + "\n" +
    '//         \XXXXXX      >                 _/XXXXX/  ' + "\n" +
    '//           \XXXXX--__/              __-- XXXX/    ' + "\n" +
    '//            -XXXXXXXX---------------  XXXXXX-     ' + "\n" +
    '//               \XXXXXXXXXXXXXXXXXXXXXXXXXX/       ' + "\n" +
    '//                 ""VXXXXXXXXXXXXXXXXXXV""' + "\n"
  }

  let(:mock_js_string) {
    ';var Yacht = {"foo":"bar"};'
  }

  describe :to_js_string do
    it "should export Yacht values to a javascript file" do
      subject.stub(:all).and_return(:foo => 'bar')
      subject.stub(:js_keys).and_return(:foo)

      subject.to_js_string.should == ';var Yacht = {"foo":"bar"};'
    end

    it "should only export values defined in javascript.yml" do
      subject.stub(:to_hash).and_return(:foo => 'bar', :baz => 'snafu')
      subject.stub(:js_keys).and_return(:baz)

      subject.to_js_string.should == ';var Yacht = {"baz":"snafu"};'
    end
  end

  describe :to_js_file do
    before do
      subject.stub(:to_js_string).and_return(mock_js_string)
    end

    it "should pass the contents of #to_js_string to #write_file prepended with a comment block" do
      subject.should_receive(:write_file).with('js_dir', 'Yacht.js', mock_js_comment + mock_js_string)

      subject.to_js_file(:dir => 'js_dir')
    end

    it "should raise an error if :dir param is not set" do
      expect {
        subject.to_js_file
      }.to raise_error(Yacht::LoadError, "Must provide :dir option")
    end
  end

  describe :mock_js_comment do
    it "returns a javascript comment informing people not to edit Yacht.js directly" do
      Yacht::Loader.send(:js_comment).should == mock_js_comment
    end
  end

  describe :write_file do
    it "should create a directory with FileUtils.mkdir_p" do
      FileUtils.should_receive(:mkdir_p).with('some_dir')
      File.stub(:open).as_null_object

      subject.write_file('some_dir', 'name', 'contents')
    end

    it "writes a file to the given dir with the given name and contents" do
      FileUtils.stub(:mkdir_p).with('some_dir')

      # from : http://stackoverflow.com/questions/4070422/rspec-how-to-test-file-operations-and-file-content
      file = mock('file')
      File.should_receive(:open).with("some_dir/name", "w").and_yield(file)
      file.should_receive(:write).with("contents")

      subject.write_file('some_dir', 'name', 'contents')
    end
  end

  describe :js_keys do
    it "raises an error if load_config_file returns nil" do
      subject.stub(:load_config_file).with(:js_keys, :expect_to_load => Array).and_return(nil)

      expect {
        subject.js_keys
      }.to raise_error( Yacht::LoadError, "Couldn't load js_keys")
    end

    it "expects load_config_file to return an Array" do
      subject.should_receive(:load_config_file).with(:js_keys, :expect_to_load => Array).and_return([])

      subject.js_keys
    end
  end

  context "Rails is defined" do
    before do
      subject.stub(:to_js_string).and_return(mock_js_string)
      Rails = mock('rails')
      Rails.stub_chain(:root, :join).with('public', 'javascripts').and_return('/path/to/rails/app/public/javascripts')
      # TODO: must be a better way to mock ActionController::Base
      #       this does NOT work:
      #         ActionController::Base = mock 'ActionController::Base'
      class ::ActionController
        class Base
          def self.before_filter(*args)
          end
        end
      end
    end

    it "should set the :dir option to 'public/javascripts' by default" do
      subject.stub(:js_comment).and_return("")
      subject.should_receive(:write_file).with('/path/to/rails/app/public/javascripts', 'Yacht.js', mock_js_string)

      subject.to_js_file
    end

    it "should add a before filter to ActionController::Base in the development environment" do
      Rails.stub_chain(:env, :development?).and_return(true)
      ActionController::Base.should_receive(:before_filter).with(:generate_yacht_js_file)

      load 'monkeypatches/rails/controller_extension.rb'
    end

    it "should not add a before filter to ActionController::Base outside the development environment" do
      Rails.stub_chain(:env, :development?).and_return(false)
      ActionController::Base.should_not_receive(:before_filter).with(:generate_yacht_js_file)

      load 'monkeypatches/rails/controller_extension.rb'
    end

  end
end